```yaml
name: Sensor Data Ingestion

on:
  # Ejecuta el workflow en cada push a la rama main
  push:
    branches: [ main ]
  # También puedes ejecutarlo manualmente o en otros eventos
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # O la versión de Python que uses

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run the service
      run: |
        uvicorn main:app --host 0.0.0.0 --port 8000

```

**Explicación del archivo:**

* **`name`:**  Nombre del workflow.
* **`on`:** Define cuándo se ejecutará el workflow. En este caso, se ejecuta en cada push a la rama `main` y también se puede ejecutar manualmente.
* **`jobs`:** Define los trabajos que se ejecutarán en el workflow. En este caso, solo hay un trabajo llamado `build-and-deploy`.
* **`runs-on`:**  Especifica el sistema operativo en el que se ejecutará el trabajo.
* **`steps`:**  Define los pasos que se ejecutarán en el trabajo.
    * **`Checkout code`:**  Clona el código del repositorio.
    * **`Set up Python`:**  Instala la versión especificada de Python.
    * **`Install dependencies`:**  Instala las dependencias del proyecto (asegúrate de tener un archivo `requirements.txt`).
    * **`Run the service`:** Ejecuta el servicio con Uvicorn.  El parámetro `--host 0.0.0.0` permite que el servicio sea accesible desde fuera del contenedor, y `--port 8000` especifica el puerto.

**Pasos para ejecutar el código como una acción en GitHub:**

1. **Crea el archivo `requirements.txt`:**  Añade las dependencias del proyecto a este archivo. Por ejemplo:
    ```
    fastapi
    uvicorn
    sqlalchemy
    pydantic
    psycopg2-binary
    ```

2. **Crea el archivo `.github/workflows/sensor-data-ingestion.yml`:**  Copia el código del workflow en este archivo.

3. **Sube los cambios a tu repositorio de GitHub:**  Haz commit y push de los cambios.

4. **Ve a la pestaña "Actions" de tu repositorio:**  Verás el workflow que has creado.

5. **Ejecuta el workflow:**  Puedes ejecutar el workflow manualmente o esperar a que se ejecute automáticamente en el próximo push a la rama `main`.

**Consideraciones:**

* **Secretos:**  Si tu URL de conexión a la base de datos contiene información sensible (como usuario y contraseña), deberías almacenarla como un secreto en la configuración de tu repositorio de GitHub y acceder a ella a través de variables de entorno en el workflow.
* **Persistencia:**  Ten en cuenta que los datos almacenados en el contenedor se perderán cuando el trabajo termine. Si necesitas persistencia de datos, deberías usar un volumen de Docker o una base de datos externa.
* **Acceso al servicio:**  Para acceder al servicio que se está ejecutando en el workflow, necesitarás configurar un túnel o utilizar un servicio de GitHub como GitHub Pages.

Espero que esto te ayude a ejecutar tu código como una acción en GitHub. ¡No dudes en preguntar si tienes alguna duda!
